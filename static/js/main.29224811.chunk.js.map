{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","Components/AddList.tsx","Components/AddItem.tsx","Components/TodoItem.tsx","Components/TodoList.tsx","navTree.tsx","App.tsx","Layout.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","AddList","props","className","Form","type","onChange","onTextChange","Button","onClick","onSubmit","AddItem","placeholder","doTitleChange","doDescChange","doClick","TodoItem","useState","checked","isChecked","setIsChecked","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","title","desc","e","deleteItem","id","changeChecked","TodoList","list","map","item","functions","doCheckboxChange","doDeleteItem","createRoute","to","name","icon","parentId","itemId","children","leftAddon","navTree","HomeSVGIcon","NavTree","Home","App","path","nanoid","todoLists","setTodoLists","currentTitle","setCurrentTitle","currentDesc","setCurrentDesc","currentListTitle","setCurrentListTitle","currentLastPath","setCurrentLastPath","currentLocation","useLocation","event","currentTarget","value","doAddTodo","newItem","pathname","onListTitleChange","addList","numb","newList","checkboxChange","temp","forEach","todo","tempList","todoList","tempListIndex","indexOf","filter","exact","component","render","MyLayout","Layout","navHeaderTitle","phoneLayout","tabletLayout","landscapeTabletLayout","desktopLayout","appBarProps","fixed","mainProps","style","padding","treeProps","useLayoutNavigation","Link","ReactDOM","StrictMode","Configuration","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.29224811.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { Button, Form } from 'react-md';\n\ninterface AddListProps {\n    onTextChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onSubmit: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nfunction AddList(props: AddListProps) {\n    return(\n        <div className=\"add-list todo-list\">\n            <Form className=\"form\">\n                <h3>Add List</h3>\n                <label className=\"label\">List Title: </label>\n                <input type=\"text\" onChange={props.onTextChange} />\n                <Button type=\"submit\" onClick={props.onSubmit} >Add List</Button>\n            </Form>\n        </div>\n    );\n}\n\nexport default AddList;\n","import React from 'react';\nimport { Button } from 'react-md';\n\ninterface AddItemProps {\n    doDescChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    doTitleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    doClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nfunction AddItem(props: AddItemProps) {\n    return(\n        <div className=\"todo-item add-item\">\n            <input type=\"text\" placeholder=\"Title...\" onChange={props.doTitleChange} />\n            <textarea placeholder=\"Description...\" onChange={props.doDescChange}></textarea>\n            <footer>\n                <Button type=\"submit\" onClick={props.doClick}>Save</Button>\n            </footer>\n        </div>\n    );\n}\n\nexport default AddItem;","import React, { useEffect, useState } from \"react\";\nimport { MdDeleteForever } from \"react-icons/md\";\n\nexport type TodoItemType = {\n    id: string;\n    title: string;\n    desc: string;\n    checked: boolean;\n};\n\nexport type TodoItemProps = {\n    id: string;\n    title: string;\n    desc: string;\n    checked: boolean;\n    changeChecked: (\n        event: React.MouseEvent<HTMLInputElement>,\n        id: string\n    ) => void;\n    deleteItem: (event: React.MouseEvent<SVGElement>, id: string) => void;\n};\n\nfunction TodoItem(props: TodoItemProps) {\n    const [isChecked, setIsChecked] = useState(props.checked);\n\n    useEffect(() => {\n        const data = localStorage.getItem(\"checkboxData\");\n\n        if (data) setIsChecked(JSON.parse(data).checked);\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem(\"checkBoxData\", JSON.stringify(isChecked));\n    });\n\n    return (\n        <div className=\"todo-item\">\n            <h3>{props.title}</h3>\n            <p>{props.desc}</p>\n            <footer>\n                <span>{isChecked ? \"Finished\" : \"Unfinished\"}</span>\n                <div className=\"footer-buttons\">\n                    <MdDeleteForever\n                        className=\"icon delete-icon\"\n                        onClick={(e) => {\n                            props.deleteItem(e, props.id);\n                        }}\n                    />\n                    <input\n                        type=\"checkbox\"\n                        checked={isChecked}\n                        onClick={(e) => {\n                            props.changeChecked(e, props.id);\n                            setIsChecked(!isChecked);\n                        }}\n                    />\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nexport default TodoItem;\n","import React from \"react\";\nimport AddItem from \"./AddItem\";\nimport TodoItem, { TodoItemType } from \"./TodoItem\";\n\ninterface TodoHandlers {\n    list: {\n        doDescChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n        doTitleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n        doClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n        doCheckboxChange: (event: React.MouseEvent<HTMLInputElement>, id: string) => void;\n        doDeleteItem: (event: React.MouseEvent<SVGElement>, id: string) => void;\n    };\n}\n\nexport type TodoListType = {\n    path: string,\n    id: string,\n    title: string,\n    list: TodoItemType[]\n}\n\nexport type TodoListProps = {\n    path: string;\n    id: string;\n    title: string;\n    list: TodoItemType[];\n    functions: TodoHandlers;\n};\n\nfunction TodoList(props: TodoListProps) {\n    return (\n        <div className=\"todo-list\">\n            {props.list.map((item) => {\n                return (\n                    <TodoItem\n                        id={item.id}\n                        title={item.title}\n                        desc={item.desc}\n                        checked={item.checked}\n                        changeChecked={props.functions.list.doCheckboxChange}\n                        deleteItem={props.functions.list.doDeleteItem}\n                    />\n                );\n            })}\n            <AddItem\n                doClick={props.functions.list.doClick}\n                doTitleChange={props.functions.list.doTitleChange}\n                doDescChange={props.functions.list.doDescChange}\n            />\n        </div>\n    );\n}\n\nexport default TodoList;\n","import React, { ReactNode, useEffect } from \"react\";\nimport { MdList, MdNoteAdd } from \"react-icons/md\";\nimport { HomeSVGIcon, LayoutNavigationItem, LayoutNavigationTree } from 'react-md';\n\nconst createRoute = (\n    to: string,\n    name: string,\n    icon: ReactNode,\n    parentId: string | null = null\n  ): LayoutNavigationItem => ({\n    to,\n    itemId: to,\n    parentId,\n    children: name,\n    leftAddon: icon\n  });\n\nexport var navTree: LayoutNavigationTree = {\n    \"/\": createRoute(\"/\", \"Home\", <HomeSVGIcon />),\n    \"/list1\": createRoute(\"/list1\", \"List 1\", <MdList />),\n    \"/add\": createRoute(\"/add\", \"Add List\", <MdNoteAdd />),\n};\n\nexport const addToNavTree = (path: string, title: string) => {\n  navTree[path] = createRoute(path, title, <MdList />);\n  delete navTree[\"/add\"];\n  navTree[\"/add\"] = createRoute(\"/add\", \"Add List\", <MdNoteAdd />);\n};\n\nfunction NavTree() {\n  useEffect(() => {\n    const data = localStorage.getItem(\"navTreeData\");\n\n    if (data) {\n      navTree = JSON.parse(data);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"navTreeData\", JSON.stringify(navTree));\n  });\n\n  return(\n    <></>\n  );\n}\n\nexport default NavTree;","import React, { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Route, Switch, useLocation } from \"react-router-dom\";\nimport AddList from \"./Components/AddList\";\nimport TodoList, { TodoListType } from \"./Components/TodoList\";\nimport NavTree, { addToNavTree } from \"./navTree\";\n\nfunction App() {\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\n        {\n            path: \"/list1\",\n            id: nanoid(),\n            title: \"List 1\",\n            list: [],\n        },\n    ]);\n    const [currentTitle, setCurrentTitle] = useState(\"\");\n    const [currentDesc, setCurrentDesc] = useState(\"\");\n    const [currentListTitle, setCurrentListTitle] = useState(\"\");\n    const [currentLastPath, setCurrentLastPath] = useState(1);\n    const currentLocation = useLocation();\n\n    useEffect(() => {\n        const data = localStorage.getItem(\"data\");\n\n        if (data) {\n            setTodoLists(JSON.parse(data).todoLists);\n            setCurrentTitle(JSON.parse(data).currentTitle);\n            setCurrentDesc(JSON.parse(data).currentDesc);\n            setCurrentListTitle(JSON.parse(data).currentListTitle);\n            setCurrentLastPath(JSON.parse(data).currentLastPath);\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem(\n            \"data\",\n            JSON.stringify({\n                todoLists: todoLists,\n                currentTitle: currentTitle,\n                currentDesc: currentDesc,\n                currentListTitle: currentListTitle,\n                currentLastPath: currentLastPath,\n            })\n        );\n    });\n\n    const doTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCurrentTitle(event.currentTarget.value);\n    };\n\n    const doDescChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setCurrentDesc(event.currentTarget.value);\n    };\n\n    const doAddTodo = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const newItem = {\n            id: nanoid(),\n            title: currentTitle,\n            desc: currentDesc,\n            checked: false,\n        };\n        setTodoLists(\n            todoLists.map((list) => {\n                if (list.path === currentLocation.pathname) {\n                    return { ...list, list: [...list.list, newItem] };\n                } else return list;\n            })\n        );\n    };\n\n    const onListTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCurrentListTitle(event.currentTarget.value);\n    };\n\n    const addList = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const numb = currentLastPath + 1;\n        const newList: TodoListType = {\n            path: `/list${numb}`,\n            id: nanoid(),\n            title: currentListTitle,\n            list: [],\n        };\n        setTodoLists([...todoLists, newList]);\n        setCurrentLastPath(numb);\n        addToNavTree(newList.path, newList.title);\n    };\n\n    const checkboxChange = (\n        event: React.MouseEvent<HTMLInputElement>,\n        id: string\n    ) => {\n        var temp = todoLists;\n        temp.forEach((todo) => {\n            todo.list.forEach((item) => {\n                if (item.id === id) {\n                    item.checked = event.currentTarget.checked;\n                    console.log(item.checked);\n                }\n            });\n        });\n        setTodoLists(temp);\n        console.log(temp);\n    };\n\n    const deleteItem = (event: React.MouseEvent<SVGElement>, id: string) => {\n        let temp = [ ...todoLists ];\n        var tempList: TodoListType | undefined;\n        temp.forEach((todoList) => {\n            todoList.list.forEach((item) => {\n                if (item.id === id) {\n                    tempList = todoList;\n                }\n            });\n        });\n\n        if (tempList) {\n            const tempListIndex = temp.indexOf(tempList);\n            tempList.list = tempList.list.filter((item: any) => item.id !== id);\n            temp[tempListIndex] = tempList;\n            temp.filter((list) => list.id === tempList?.id);\n            setTodoLists(temp);\n        }\n    };\n\n    return (\n        <div className=\"app-container\">\n            <NavTree />\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                {todoLists.map((todoList) => {\n                    return (\n                        <Route\n                            path={todoList.path}\n                            render={(props) => (\n                                <TodoList\n                                    {...props}\n                                    path={todoList.path}\n                                    id={todoList.id}\n                                    title={todoList.title}\n                                    list={todoList.list}\n                                    functions={{\n                                        list: {\n                                            doTitleChange: doTitleChange,\n                                            doDescChange: doDescChange,\n                                            doClick: doAddTodo,\n                                            doCheckboxChange: checkboxChange,\n                                            doDeleteItem: deleteItem,\n                                        },\n                                    }}\n                                />\n                            )}\n                        />\n                    );\n                })}\n                <Route\n                    path=\"/add\"\n                    render={(props) => (\n                        <AddList\n                            {...props}\n                            onSubmit={addList}\n                            onTextChange={onListTitleChange}\n                        />\n                    )}\n                />\n            </Switch>\n        </div>\n    );\n}\n\nfunction Home() {\n    return (\n        <div className=\"content home-container\">\n            PWA todo lists, choose a list to get started.\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport { Layout, useLayoutNavigation } from 'react-md';\nimport { useLocation, Link } from \"react-router-dom\";\nimport App from \"./App\";\nimport { navTree } from \"./navTree\";\n\nfunction MyLayout(): React.ReactElement {\n    const { pathname } = useLocation();\n    return (\n        <Layout\n            id=\"non-fixed-app-bar-layout\"\n            title=\"PWA Todo\"\n            navHeaderTitle=\"Lists\"\n            phoneLayout=\"temporary\"\n            tabletLayout=\"toggleable\"\n            landscapeTabletLayout=\"toggleable\"\n            desktopLayout=\"toggleable\"\n            appBarProps={{ fixed: false }}\n            mainProps={{ component: \"div\", style: { padding: \"1rem\" } }}\n            treeProps={useLayoutNavigation(navTree, pathname, Link)}\n        >\n            <App />\n        </Layout>\n    );\n}\n\nexport default MyLayout;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./sass/index.scss\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport MyLayout from \"./Layout\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { Configuration } from \"react-md\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <Configuration>\n                <MyLayout />\n            </Configuration>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}